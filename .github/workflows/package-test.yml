name: Test

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        required: true
        description: "Whether to release the package"
      version:
        type: string
        required: true
        description: "Version of the package"

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      COVERAGE_DIR: _site
      MAIN_DIR: NeuralTSNE
      TAG_VERSION: ${{ inputs.version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    outputs:
      pytest-outcome: ${{ steps.pytest.outcome }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Update version
        run: |
          sed -i "s/{{VERSION}}/${TAG_VERSION}/g" $MAIN_DIR/NeuralTSNE/__init__.py
      - name: Copy License file to package directory
        run: cp LICENSE $MAIN_DIR/.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install flake8 pytest pytest-cov pytest-html
      - name: Install package
        run: |
          pip install -e $MAIN_DIR/.
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        id: pytest
        continue-on-error: true
        run: |
          mkdir -p $COVERAGE_DIR/html_report
          pytest -c $MAIN_DIR/pyproject.toml \
          --cov-config=$MAIN_DIR/.coveragerc \
          --cov=$MAIN_DIR --cov-report=json:$COVERAGE_DIR/coverage.json \
          --cov-report=html:$COVERAGE_DIR/coverage \
          --html=$COVERAGE_DIR/html_report/report.html
      - name: Upload tests artifact
        uses: actions/upload-artifact@v4
        with:
          name: tests
          path: _site
          if-no-files-found: error

  release:
    if: ${{ inputs.release }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TAG_VERSION: ${{ inputs.version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Create branch for release
        uses: peterjgrainger/action-create-branch@v3.0.0
        with:
          branch: ${{ env.TAG_VERSION }}
          sha: ${{ github.event.pull_request.head.sha }}

  generate_docs:
    needs: [build, release]
    if: |
      always() && 
      (needs.build.result == 'success' || needs.build.result == 'skipped') &&
      (needs.release.result == 'success' || needs.release.result == 'skipped') &&
      !(needs.build.result == 'skipped' && needs.release.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      MAIN_DIR: NeuralTSNE
      PAGES_DIR: _site
      TAG_VERSION: ${{ inputs.version }}
      GITHUB_USER: ${{ github.repository_owner }}
      GITHUB_REPO: ${{ github.event.repository.name }}
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Download tests artifact
        uses: actions/download-artifact@v4
        with:
          name: tests
          path: ${{ github.workspace }}/_site
      - name: Update version
        run: |
          sed -i "s/{{VERSION}}/${TAG_VERSION}/g" $MAIN_DIR/NeuralTSNE/__init__.py
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e $MAIN_DIR/.
      - name: Install Sphinx
        run: |
          python -m pip install sphinx sphinx-rtd-theme sphinx-multiversion sphinx-github-style
      - name: Sphinx build
        continue-on-error: true
        run: |
          mkdir ./$PAGES_DIR/docs
          sphinx-multiversion ./docs ./$PAGES_DIR/docs
      - name: Push docs to dedicated branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: ${{ env.PAGES_DIR }}/docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLEAR_GLOBS_FILE: ".clear_target_files"
      - name: Create main index file
        run: |
          sed -e 's|PLACEHOLDER_TEST_REPORT|html_report/report.html|g' \
              -e 's|PLACEHOLDER_COVERAGE_REPORT|coverage/index.html|g' \
              -e 's|PLACEHOLDER_COVERAGE_JSON|coverage.json|g' \
              -e 's|PLACEHOLDER_DOCUMENTATION|docs/${{ env.TAG_VERSION }}/index.html|g' index/index.html > $PAGES_DIR/index.html
      - name: Fix permissions in pages directory
        run: |
          chmod -c -R +rX "$PAGES_DIR/"
      - name: Upload Github Pages artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    needs: generate_docs
    if: |
      always() &&
      needs.generate_docs.result == 'success'

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Github Pages
        id: deployment
        uses: actions/deploy-pages@v4

  run_release:
    needs: [build, deploy]
    if: |
      always() &&
      needs.build.result == 'success' && needs.deploy.result == 'success' &&
      inputs.release == true && needs.build.outputs.pytest-outcome == 'success'
    permissions:
      id-token: write
      contents: read

    uses: ./.github/workflows/package-release.yml
    with:
      TAG_VERSION: ${{ inputs.version }}
